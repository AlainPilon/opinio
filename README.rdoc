= Opini*

== Description

Opinio is an engine used to add comments behaviour to your application.
The engine is designed to work only with *Rails 3*

== Intallation

Simply add the following line to your *Gemfile*:

  gem "opinio", :git => "git://github.com/Draiken/opinio.git"

and run:

  bundle

== Documentation

Rdocs here:
  http://rubydoc.info/github/Draiken/opinio/master/frames


== Usage

Opinio provides generators to facilitate it's usage.
The most common way to quickly get Opinio working is:

  rails g opinio:install comment

This will generate the *Comment* model, migration and also generate the opinio initializer for customization of the engine.

In order to add the comments functionallity to a model, you use the *opinio_subjectum* method

  class Post < ActiveRecord::Base
    opinio_subjectum
  end

Now in your view, where the comments will be displayed, you simply add:

  <%= comments_for @post %>

And theere you go, you can now comment in your post.
Aditional options can be found on the {RDocs}[http://rubydoc.info/github/Draiken/opinio/master/frames]

== Customization

=== Views

Of course you will want to customize how the comments are displayed or any other customization to the view. To generate the view files on your application, run:

  rails g opinio:views

And you can customize all the views used by the engine.

=== Behaviour

==== Pretty Urls

Often times you will want the engine to show the index of comments for a specific item
without having to pass *:commentable_type* or *:commentable_id*.

In order to do that, opinio provides a method to *ActionController::Base*:

  opinio_identifier do |params|
    return Review.find(params[:review_id]) if params[:review_id]
    return Product.find(params[:product_id]) if params[:product_id]
  end

Basically on this method you receive the *params* variable and you tell the engine, who owns
the comments from that page.
This allows you to use routes like:

  /products/1/comments
  /products/1/reviews/1/comments

Without passing those 2 parameters.
I suggest you put this method on the *ApplicationController*

==== Customize destroy conditions

By default, anyone can destroy any comment in the engine. We don't want that.
To setup a custom destroy condition we can use the methods provided by opinio
in our controllers. For instance, if our opinio model is called 'comment' 
it would be like this:

  comment_destroy_conditions do |comment|
    comment.owner == current_user
  end

This would make users only be able to remove their own comments.
Another example would be using the *CanCan*:

  comment_destroy_conditions do |comment|
    authorize :destroy, comment
  end

You get the picture, you're inside your controller's methods on that block
so you can call anything your normal controllers call on actions.

== Contribution

If you want to help in any way with *Opinio* please message me or fork the project, make the changes and send me a pull request.
For issues please use the github {issues tracker}[https://github.com/Draiken/opinio/issues]

Remember this engine is still in development :)

=== TODO

  * Haml views
  * Better controller overriding (coding and documentation)
  * Support for deeper levels of replies
  * Add tons of rspecs for
    * controllers
    * routes
    * models
